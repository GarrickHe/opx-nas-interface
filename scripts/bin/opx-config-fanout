#!/usr/bin/python
# Copyright (c) 2015 Dell Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
#
# THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR
# CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT
# LIMITATION ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS
# FOR A PARTICULAR PURPOSE, MERCHANTABLITY OR NON-INFRINGEMENT.
#
# See the Apache Version 2.0 License for specific language governing
# permissions and limitations under the License.

import cps
import cps_object
import sys
import nas_os_if_utils as nas_if
import nas_front_panel_map as fp
import cps_utils
import time
import base_qos_init
from nas_common_header import *

_g_if_name = 'if/interfaces/interface/name'

def usage():
    print ("Invalid arguments specified - opx-config-fanout <port> <mode> <speed>" \
            + "\neg: opx-config-fanout e101-001-0 4x1 25g" \
            + "\n    opx-config-fanout e101-001-1 1x1 100g")

if __name__ == '__main__':
    if len(sys.argv) < 4:
        usage()
        sys.exit(0)
    br_mode = sys.argv[2].lower()
    if not is_key_valid(yang_breakout, br_mode):
        print 'Invalid breakout mode %s' % br_mode
        sys.exit(0)
    port_speed = sys.argv[3].upper()
    if not is_key_valid(yang_speed, port_speed):
        print 'Invalid port speed %s' % port_speed
        sys.exit(0)

    nas_fp_cache = nas_if.FpPortCache()
    if_cache = nas_if.IfCache()

    if sys.argv[1].isdigit():
        fp_obj = nas_fp_cache.get(int(sys.argv[1]))
    else:
        front_port = nas_if.get_front_port_from_name(sys.argv[1])
        if front_port == None:
            print 'Failed to get front port id'
            exit(0)
        fp_obj = nas_fp_cache.get(front_port[0])
    if fp_obj is None:
        print "Invalid front panel port specified..."
        print "Please choose from one of the following..."
        nas_fp_cache.print_keys()
        exit(0)

    allowed_speed = get_value(breakout_allowed_speed, br_mode)
    if port_speed not in allowed_speed:
        print 'Invalid break mode and port speed combination'
        sys.exit(0)
    _speed = get_value(yang_speed, port_speed)
    _mode = get_value(yang_breakout, br_mode)

    br_cap_list = fp_obj.get_attr_data('br-cap')
    breakout_cap = []
    port_speed_cap = []
    for cap_key,cap_item in br_cap_list.items():
        br_cap = cap_item['breakout-mode']
        if br_cap not in breakout_cap:
            breakout_cap.append(br_cap)
            port_speed_cap.append(cap_item['port-speed'])

    if _mode not in breakout_cap:
        print 'breakout mode %d not supported on this port' % _mode
        sys.exit(1)
    current_mode = fp_obj.get_attr_data('breakout-mode')
    current_speed = fp_obj.get_attr_data('port-speed')
    if current_mode == _mode and current_speed == _speed:
        print 'Port already configured as breakout mode %d and speed %d' % (
              _mode, _speed)
        sys.exit(1)

    l = []

    npu = fp_obj.get_attr_data('npu-id')
    phy_port_list = nas_if.physical_ports_for_front_panel_port(fp_obj)

    for phy_port in phy_port_list:
        if_port = if_cache.get_by_port(
            npu,
            phy_port.get_attr_data('port-id'))
        if if_port is None:
            continue
        if_name = if_port.get_attr_data(_g_if_name)
        print "Deleting.. %s" % if_name
        cps_obj = cps_object.CPSObject(module = 'dell-base-if-cmn/set-interface',
                                       data = {'dell-base-if-cmn/set-interface/input/operation': 2,
                                               _g_if_name: if_name})
        l.append(('rpc', cps_obj.get()))
    tr = cps_utils.CPSTransaction(l)
    tr.commit()

    obj = cps_object.CPSObject(module='base-if-phy/breakout',
                               data={
                               'base-if-phy/breakout/input/front-panel-port':
                                    fp_obj.get_attr_data(
                                        'base-if-phy/front-panel-port/front-panel-port'),
                               'base-if-phy/breakout/input/breakout-mode': _mode,
                               'base-if-phy/breakout/input/port-speed': _speed
                               })
    tr = cps_utils.CPSTransaction([('rpc', obj.get())])

    if tr.commit() == False:
        print "Failed..."

        # revert ports delete
        l = []
        # add ports to a transaction
        for phy_port in phy_port_list:
            ifobj = nas_if.make_interface_from_phy_port(phy_port, current_mode, current_speed)
            print "Creating interface " + ifobj.get_attr_data(_g_if_name)
            l.append(('rpc', ifobj.get()))

        # do the actual port create
        tr = cps_utils.CPSTransaction(l)

        # commit
        if tr.commit() == False:
            print "Failed to create interfaces"
        else:
            print "Successfully created interfaces..."
    else:
        print "Completed..."

        # look at thephysical port and determine the number of hardware ports
        # that exist
        target_number_of_ports = len(
            fp_obj.get()['data']['base-if-phy/front-panel-port/port'])

        # if the mode is breakin... then need to create one port only
        if _mode == 4:  # 1x1
            target_number_of_ports = 1
        elif _mode == 3: # 2x1
            target_number_of_ports = 2
        else: # 4x1
            target_number_of_ports = 4

        # wait for all of the physical ports to appear - depends on timing
        phy_port_list = []
        while len(phy_port_list) < target_number_of_ports:
            time.sleep(1)
            phy_port_list = nas_if.physical_ports_for_front_panel_port(fp_obj)

        l = []
        ifnames = []
        # add ports to a transaction
        for phy_port in phy_port_list:
            ifobj = nas_if.make_interface_from_phy_port(phy_port)
            print "Creating interface " + ifobj.get_attr_data(_g_if_name)
            l.append(('rpc', ifobj.get()))
            ifnames.append(ifobj.get_attr_data(_g_if_name))
            target_number_of_ports -= 1
            if target_number_of_ports == 0:
                break

        # do the actual port create
        tr = cps_utils.CPSTransaction(l)

        # commit
        if tr.commit() == False:
            print "Failed to create interfaces for breakout operation"
        else:
            print "Successfully created interfaces..."

        # init qos default
        base_qos_init.init_interfaces(ifnames)

