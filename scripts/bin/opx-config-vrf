#!/usr/bin/python
# Copyright (c) 2018 Dell Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
#
# THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR
# CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT
# LIMITATION ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS
# FOR A PARTICULAR PURPOSE, MERCHANTABLITY OR NON-INFRINGEMENT.
#
# See the Apache Version 2.0 License for specific language governing
# permissions and limitations under the License.


import sys
import getopt
import cps
import cps_utils
import nas_ut_framework as nas_ut
import nas_os_utils
import cps_object
import nas_os_if_utils as nas_if
import nas_common_utils as nas_common
import os
from cps_utils import *
import sys
import nas_os_utils

intf_rpc_key_id = 'vrf-mgmt/intf-bind-ni/input'
intf_rpc_key_attr = 'vrf-mgmt/intf-bind-ni/input/interface'
vrf_rpc_key_id = 'ni/network-instances/network-instance'
intf_rpc_op_attr_id = 'ni/network-instances/network-instance/'
vrf_name_attr_id = 'ni/network-instances/network-instance/name'
intf_mgmt_key_id = 'ni/if/interfaces/interface'
intf_mgmt_key_attr_id = 'ni/if/interfaces/interface'
intf_name_mgmt_attr_id= 'if/interfaces/interface/name'
vrf_show_attr_id = 'ni/network-instances'
intf_rpc_op_type_map = {'create': 1, 'delete': 2, 'set': 3, 'unset':4}
mgmt_rpc_op_type_map = {'set':'create','unset':'delete'}



def nas_vrf_op(op, data_dict):
    obj_list = []
    commit_changes = False
    try:
        if op == 'get':
            obj = cps_object.CPSObject( vrf_show_attr_id, data=data_dict)
        else:
            if op in intf_rpc_op_type_map:
                data_dict[intf_rpc_op_attr_id] = intf_rpc_op_type_map[op]
            else:
                print 'Unknown operation type %s' % op
                return False

            if op == "create":
                obj = cps_object.CPSObject(vrf_rpc_key_id, data=data_dict)
                if data_dict[vrf_name_attr_id] == 'management' and data_dict[intf_name_mgmt_attr_id] != []:
                    commit_changes = commit(op, obj)
                    obj = cps_object.CPSObject(intf_mgmt_key_attr_id, data=data_dict)
                elif data_dict[intf_rpc_key_attr] != []:
                    commit_changes = commit(op, obj)
                    obj_list = _port_obj_list(intf_rpc_key_id,data_dict)
                    op = 'rpc'
                else:
                    pass

            elif op == "set" or op == 'unset':
                if data_dict[vrf_name_mgmt_id] == 'management' and data_dict[intf_mgmt_attr_id] != []:
                    obj = cps_object.CPSObject(intf_mgmt_key_attr_id, data=data_dict)
                    op = mgmt_rpc_op_type_map[op]
                else:
                    obj_list = _port_obj_list(intf_rpc_key_id,data_dict)
                    op = 'rpc'

            else:
                obj = cps_object.CPSObject(vrf_rpc_key_id, data=data_dict)

        if obj_list != []:
            for obj in obj_list:
                commit_changes = commit(op, obj)
                if commit_changes == False:
                    break
        elif op == 'get':
            nas_common.get_cb_method(op)(obj)
        else:
            commit_changes = commit(op,obj)

        if commit_changes != False:
            print "Configuration Successful..."

    except ValueError:
        print "Configuration Error"


def usage():
    ''' Usage Method '''

    print '< Usage >'
    print 'opx-config-vrf can be used to configure the VRF and add ports for VRF\n'
    print '-h, --help        : Show the option and usage'
    print '-c, --create      : Add VRF to the configuration'
    print '-d, --delete      : Delete the specific VRF'
    print '-v, --vrf         : VRF name that user wants to create'
    print '-p, --port        : port(s) that need to be added for a VRF'
    print '--addport         : option to add port to the given VRF'
    print '--removeport      : option to delete port from the given VRF'
    print '-s, --show        : show the VRF parameter, when no VRF name given show all'

    print 'Example:'
    print 'opx-config-vrf  --create --vrf blue --port e101-001-0,e101-004-0'
    print 'opx-config-vrf  --create --vrf management --port eth0'
    print 'opx-config-vrf  --delete --vrf blue'
    print 'opx-config-vrf  --addport --vrf blue --port e101-001-0,e101-004-0'
    print 'opx-config-vrf  --removeport --vrf blue --port e101-001-0,e101-004-0'
    print 'opx-config-vrf  --show    [--vrf blue]'
    sys.exit(1)


name_attr_id = 'ni/network-instances/network-instance/name'
intf_attr_id = 'vrf-mgmt/intf-bind-ni/input/interface'
vrf_name_port_id = 'vrf-mgmt/intf-bind-ni/input/ni-name'
vrf_intf_operation_type = 'vrf-mgmt/intf-bind-ni/input/operation'
intf_mgmt_attr_id = 'if/interfaces/interface/name'
vrf_name_mgmt_id = 'ni/if/interfaces/interface/bind-ni-name'


def commit(op, obj):
    l = []
    obj_tup = (op, obj.get())
    l.append(obj_tup)
    t = CPSTransaction(l)
    ret = t.commit()
    if ret == False:
        print "Configuration Failed..."
    else:
        pass
    return ret

def _port_name_list(ports):
    l = []
    port_list = str.split(ports, ",")
    for port in port_list:
        l.append((port.strip()))
    return l

def _port_obj_list(attr,data_dict):
    nas_obj_list = []
    int_list = data_dict[intf_attr_id]
    for ports in int_list:
        data_dict[intf_attr_id] = ports
        obj = cps_object.CPSObject(attr, data=data_dict)
        nas_obj_list.append(obj)
    return nas_obj_list


def main(argv):
    ''' The main function will read the user input from the
    command line argument and  process the request  '''

    vrf_name = ''
    choice = ''
    ports = ''
    if_name = ''

    try:
        opts, args = getopt.getopt(argv, "hcdsv:p:",
                                   ["help", "create", "delete","show",
                                    "vrf=","port=", "addport","removeport"
                                    ]
        )

    except getopt.GetoptError:
        usage()


    for opt, arg in opts:

        if opt in ('-h', '--help'):
            choice = 'help'

        elif opt in ('-p', '--port'):
            ports = arg

        elif opt in ('-v', '--vrf'):
            vrf_name = arg

        elif opt in ('-c', '--create'):
            choice = 'create'

        elif opt in ('-d', '--delete'):
            choice = 'delete'

        elif opt in ('-s', '--show'):
            choice = 'get'

        elif opt == '--addport':
            choice = 'addport'

        elif opt == '--removeport':
            choice = 'removeport'



    if choice == 'create' and vrf_name != '':
        ifname_list = []
        if ports != '':
            ifname_list = _port_name_list(ports)
        if vrf_name == 'management':
            nas_vrf_op("create", {name_attr_id: vrf_name, vrf_name_mgmt_id: vrf_name, intf_mgmt_attr_id: ifname_list,intf_attr_id:[]})
        else:
            nas_vrf_op("create", {name_attr_id: vrf_name, vrf_name_port_id:vrf_name ,intf_attr_id: ifname_list, vrf_intf_operation_type: 1 })

    elif choice == 'delete' and vrf_name != '':
        nas_vrf_op("delete", {name_attr_id: vrf_name})

    elif choice == 'addport' and vrf_name != '' and ports != '':
        ifname_list = _port_name_list(ports)
        if vrf_name == 'management':
            nas_vrf_op("set", {vrf_name_mgmt_id: vrf_name, intf_mgmt_attr_id: ifname_list})
        else:
            nas_vrf_op("set", {vrf_name_port_id: vrf_name, intf_attr_id: ifname_list, vrf_intf_operation_type: 1, vrf_name_mgmt_id:[], intf_mgmt_attr_id:[]})

    elif choice == 'removeport' and vrf_name != '' and ports != '':
        ifname_list = _port_name_list(ports)
        if vrf_name == 'management':
            nas_vrf_op("unset", {vrf_name_mgmt_id: vrf_name, intf_mgmt_attr_id: ifname_list})
        else:
            nas_vrf_op("set", {vrf_name_port_id: vrf_name, intf_attr_id: ifname_list, vrf_intf_operation_type: 2, vrf_name_mgmt_id:[], intf_mgmt_attr_id:[]})

    elif choice == 'get':
        if vrf_name != '':
            nas_vrf_op("get", {name_attr_id: vrf_name})
        else:
            nas_vrf_op("get", {})
    else:
        usage()


# Calling the main method
if __name__ == "__main__":
    main(sys.argv[1:])

