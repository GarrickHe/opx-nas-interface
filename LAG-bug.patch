diff --git a/configure.ac b/configure.ac
index b11d2eb..dc1cfe7 100644
--- a/configure.ac
+++ b/configure.ac
@@ -1,7 +1,7 @@
 #                                               -*- Autoconf -*-
 # Process this file with autoconf to produce a configure script.
 AC_PREREQ([2.69])
-AC_INIT([opx-nas-interface], [5.18.0+opx1], [ops-dev@lists.openswitch.net])
+AC_INIT([opx-nas-interface], [5.18.0+opx2], [ops-dev@lists.openswitch.net])
 AM_INIT_AUTOMAKE([foreign subdir-objects])
 AC_CONFIG_SRCDIR([.])
 AC_CONFIG_HEADERS([config.h])
diff --git a/debian/changelog b/debian/changelog
index 4b0b60c..4237ecc 100644
--- a/debian/changelog
+++ b/debian/changelog
@@ -1,4 +1,13 @@
+opx-nas-interface (5.18.0+opx2) unstable; urgency=medium
+
+  * Bugfix: Properly update/publish LAG operation-state information
+  * Bugfix: Minor speed improvements
+  * Bugfix: cps_config_lag.py script to add memberports properly
+ 
+ -- Dell EMC <ops-dev@lists.openswitch.net>  Mon, 09 Jul 2018 17:17:56 -0800
+ 
 opx-nas-interface (5.18.0+opx1) unstable; urgency=medium
+
   * Bugfix: Sending sequential hwport offset value from port group object to PAS
             for setting media transciever
   * Bugfix: Handle the mode change for lag blocked port in netlink handler
@@ -8,6 +17,7 @@ opx-nas-interface (5.18.0+opx1) unstable; urgency=medium
   * Bugfix: Fix MAC address change when adding memberport to LAG
   * Feature: Add interface name and ifindex to the output list when querying for stats
   * Feature: Adding QSA support for 1G SFP media
+
  -- Dell EMC <ops-dev@lists.openswitch.net>  Thu, 05 Jul 2018 17:17:56 -0800
 
 opx-nas-interface (5.18.0) unstable; urgency=medium
diff --git a/scripts/bin/cps_config_lag.py b/scripts/bin/cps_config_lag.py
index 31da5ad..6e50338 100755
--- a/scripts/bin/cps_config_lag.py
+++ b/scripts/bin/cps_config_lag.py
@@ -15,6 +15,7 @@
 
 import sys
 import getopt
+import cps
 import cps_object
 import cps_utils
 import nas_ut_framework as nas_ut
@@ -64,10 +65,11 @@ def usage():
     print '\n Example'
     print '\t\t cps_config_lag.py --create --lanme bond1'
     print '\t\t cps_config_lag.py --delete --lname bond1'
-    print '\t\t cps_config_lag.py --add --lname bond1 --port e00-5,e00-6 '
-    print '\t\t cps_config_lag.py --remove --lname bond1 --port e00-5,e00-6 '
-    print '\t\t cps_config_lag.py --set --lname bond1 --port e00-5,e00-6 --frwd yes/no'
-    print '\t\t cps_config_lag.py --set --lname bond1 --mac 12:34:56:78:12:35'
+    print '\t\t cps_config_lag.py --add --lname bond1 --port e101-001-0,e101-002-0 '
+    print '\t\t cps_config_lag.py --set --lname bond1 --port e101-003-0,e101-004-0 '
+    print '\t\t cps_config_lag.py --remove --lname bond1 --port e101-001-0,e101-002-0 '
+    print '\t\t cps_config_lag.py --set --lname bond1 --port e101-001-0,e101-002-0 --frwd yes/no'
+    print '\t\t cps_config_lag.py --set --lname bond1 --mac ae:6e:2e:b4:40:ff'
     print '\t\t cps_config_lag.py --set --lname bond1 --admn up'
     print '\t\t cps_config_lag.py --get --lname bond1'
     print '\t\t cps_config_lag.py --lname bond1 --mac-learn drop  '
@@ -181,11 +183,24 @@ def main(argv):
                            if (frwd_enable == 'yes') else
                            "base-if-lag/if/interfaces/interface/block-port-list": port_list})
 
-    elif (choice == 'add' or choice == 'remove') and port != '' and lag_name != '':
-        op = "set" if (choice == "add") else "delete"
+    elif (choice == 'add' or choice == 'remove' or choice == 'set') and port != '' and lag_name != '':
+        op = "set" if (choice == "add" or choice == "set") else "delete"
+        attr_data = {"if/interfaces/interface/name": lag_name}
         (obj, op) = nas_lag_op(op,
-                   {"if/interfaces/interface/name": lag_name},False)
-        port_list = port.split(",")
+                   attr_data, False)
+        cur_mem_ports = []
+
+        if choice == "add":
+            obj_list = []
+            r_obj = cps_object.CPSObject(module = intf_lag_key, data = attr_data)
+            if cps.get([r_obj.get()], obj_list):
+                if len(obj_list) == 1:
+                    cps_obj = cps_object.CPSObject(obj=obj_list[0])
+                    member_ports_obj = cps_obj.get_attr_data('dell-if/if/interfaces/interface/member-ports')
+                    for key in member_ports_obj:
+                        cur_mem_ports.append(member_ports_obj[key]['name'])
+
+        port_list = sorted(port.split(",") + cur_mem_ports)
         l = ["dell-if/if/interfaces/interface/member-ports","0","name"]
         index = 0
         for i in port_list:
diff --git a/src/lag/nas_int_lag_cps.cpp b/src/lag/nas_int_lag_cps.cpp
index 6dbd293..64a7846 100644
--- a/src/lag/nas_int_lag_cps.cpp
+++ b/src/lag/nas_int_lag_cps.cpp
@@ -56,6 +56,7 @@ const static int MAX_CPS_MSG_BUFF=4096;
 typedef std::unordered_set <hal_ifindex_t> nas_port_list_t;
 static cps_api_return_code_t nas_cps_set_lag(cps_api_object_t obj);
 static cps_api_return_code_t nas_cps_delete_port_from_lag(nas_lag_master_info_t *nas_lag_entry, hal_ifindex_t ifindex);
+static void nas_cps_update_oper_state(nas_lag_master_info_t *nas_lag_entry);
 
 static bool nas_lag_get_ifindex_from_obj(cps_api_object_t obj,hal_ifindex_t *index){
     cps_api_object_attr_t lag_name_attr = cps_api_get_key_data(obj, IF_INTERFACES_INTERFACE_NAME);
@@ -540,6 +541,7 @@ static cps_api_return_code_t cps_lag_update_ports(nas_lag_master_info_t  *nas_la
                 return cps_api_ret_code_ERR;
             }
 
+
         } else if((op == cps_api_oper_DELETE) &&
             (nas_lag_entry->port_list.find(*it) != nas_lag_entry->port_list.end())) {
 
@@ -568,6 +570,8 @@ static cps_api_return_code_t cps_lag_update_ports(nas_lag_master_info_t  *nas_la
                         (op != cps_api_oper_DELETE) ? "Add" : "Remove", *it, nas_lag_entry->name);
     }
 
+    nas_cps_update_oper_state(nas_lag_entry);
+
     return cps_api_ret_code_OK;
 }
 
@@ -668,7 +672,23 @@ cps_api_return_code_t lag_state_object_publish(nas_lag_master_info_t *nas_lag_en
     return cps_api_ret_code_OK;
  }
 
+static void nas_cps_update_oper_state(nas_lag_master_info_t *nas_lag_entry) {
+    bool prev_oper_status = nas_lag_entry->oper_status;
+    nas_lag_entry->oper_status = false;
 
+    for (const auto &it : nas_lag_entry->port_oper_list) {
+        if (it.second) {
+            nas_lag_entry->oper_status = true;
+            break;
+        }
+    }
+
+    if (nas_lag_entry->oper_status != prev_oper_status) {
+        lag_state_object_publish(nas_lag_entry, nas_lag_entry->oper_status);
+    }
+
+    return;
+}
 
 static cps_api_return_code_t nas_process_lag_block_ports(nas_lag_master_info_t  *nas_lag_entry,
         nas_port_list_t &port_index_list,bool port_state)
@@ -1325,6 +1345,7 @@ void nas_lag_port_oper_state_cb(npu_id_t npu, npu_port_t port, IF_INTERFACES_STA
          if (!nas_lag_entry->oper_status) {
             nas_lag_update_master_oper_state(nas_lag_entry, IF_INTERFACES_STATE_INTERFACE_OPER_STATUS_UP);
             nas_lag_entry->oper_status = true;
+            lag_state_object_publish(nas_lag_entry,true);
          }
     }
 
@@ -1336,7 +1357,7 @@ void nas_lag_port_oper_state_cb(npu_id_t npu, npu_port_t port, IF_INTERFACES_STA
 
     if(status == IF_INTERFACES_STATE_INTERFACE_OPER_STATUS_DOWN){
         bool publish_oper_down = true;
-        for(auto it : nas_lag_entry->port_oper_list){
+        for(const auto &it : nas_lag_entry->port_oper_list){
             if(it.second == true){
                 publish_oper_down = false;
                 break;
diff --git a/src/vlan/nas_int_bridge.cpp b/src/vlan/nas_int_bridge.cpp
index 5d42370..2723ccb 100644
--- a/src/vlan/nas_int_bridge.cpp
+++ b/src/vlan/nas_int_bridge.cpp
@@ -124,7 +124,7 @@ void nas_lag_update_vlan_oper_state_cb(hal_ifindex_t lagif_idx,
     nas_bridge_t *vlan_entry;
 
     if (nas_port_to_vlans.find(lagif_idx) != nas_port_to_vlans.end()) {
-        for (auto vlan_index : nas_port_to_vlans[lagif_idx]) {
+        for (const auto &vlan_index : nas_port_to_vlans[lagif_idx]) {
             //nas_bridge_lock();
             if ((vlan_entry = nas_get_bridge_node(vlan_index)) == NULL) {
                 return;
@@ -136,7 +136,7 @@ void nas_lag_update_vlan_oper_state_cb(hal_ifindex_t lagif_idx,
             } else {
                 vlan_entry->oper_list[lagif_idx] = false;
                 vlan_entry->oper_status = IF_INTERFACES_STATE_INTERFACE_OPER_STATUS_DOWN;
-                for (auto oper_status : vlan_entry->oper_list) {
+                for (const auto &oper_status : vlan_entry->oper_list) {
                     if (oper_status.second) {
                         vlan_entry->oper_status = IF_INTERFACES_STATE_INTERFACE_OPER_STATUS_UP;
                         break;
@@ -166,7 +166,7 @@ void nas_port_update_vlan_oper_state_cb(npu_id_t npu, npu_port_t port,
     }
 
     if (nas_port_to_vlans.find(port_index) != nas_port_to_vlans.end()) {
-        for (auto vlan_index : nas_port_to_vlans[port_index]) {
+        for (const auto &vlan_index : nas_port_to_vlans[port_index]) {
             //nas_bridge_lock();
             if ((vlan_entry = nas_get_bridge_node(vlan_index)) == NULL) {
                 return;
@@ -178,7 +178,7 @@ void nas_port_update_vlan_oper_state_cb(npu_id_t npu, npu_port_t port,
             } else {
                 vlan_entry->oper_list[port_index] = false;
                 vlan_entry->oper_status = IF_INTERFACES_STATE_INTERFACE_OPER_STATUS_DOWN;
-                for (auto oper_status : vlan_entry->oper_list) {
+                for (const auto &oper_status : vlan_entry->oper_list) {
                     if (oper_status.second) {
                         vlan_entry->oper_status = IF_INTERFACES_STATE_INTERFACE_OPER_STATUS_UP;
                         break;
diff --git a/src/vlan/nas_int_vlan.cpp b/src/vlan/nas_int_vlan.cpp
index a9175b3..f5f2dcc 100644
--- a/src/vlan/nas_int_vlan.cpp
+++ b/src/vlan/nas_int_vlan.cpp
@@ -278,7 +278,7 @@ t_std_error nas_add_or_del_port_to_vlan(npu_id_t npu_id, hal_vlan_id_t vlan_id,
         /* action for deleting port */
         (vlan_entry->oper_list).erase(port_idx);
         vlan_entry->oper_status = IF_INTERFACES_STATE_INTERFACE_OPER_STATUS_DOWN;
-        for (auto oper_status: vlan_entry->oper_list) {
+        for (const auto &oper_status: vlan_entry->oper_list) {
             if (oper_status.second) {
                 vlan_entry->oper_status = IF_INTERFACES_STATE_INTERFACE_OPER_STATUS_UP;
                 break;
diff --git a/src/vlan/nas_vlan_lag_api.cpp b/src/vlan/nas_vlan_lag_api.cpp
index 7b1d337..44d684f 100644
--- a/src/vlan/nas_vlan_lag_api.cpp
+++ b/src/vlan/nas_vlan_lag_api.cpp
@@ -98,7 +98,7 @@ t_std_error nas_add_or_del_lag_in_vlan(hal_ifindex_t lag_index, hal_vlan_id_t vl
         ret = ndi_del_lag_from_vlan(0, vlan_id, tagged_lag, tag_cnt, untagged_lag, untag_cnt);
         (vlan_entry->oper_list).erase(lag_index);
         vlan_entry->oper_status = IF_INTERFACES_STATE_INTERFACE_OPER_STATUS_DOWN;
-        for (auto oper_status: vlan_entry->oper_list) {
+        for (const auto &oper_status : vlan_entry->oper_list) {
             if (oper_status.second) {
                 vlan_entry->oper_status = IF_INTERFACES_STATE_INTERFACE_OPER_STATUS_UP;
                 break;
